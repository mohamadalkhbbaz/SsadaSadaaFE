
declarative  , componenet , 
1.var , let, const
var : globale scope > define before declare
let : block scope  > reChange value 
const = block scope > !reChange value 

2. Arrow Function 
const sayGo =  _  => c.l("go");
const say=  _  =>  2;
const sayMyName =  (name)  => c.l(name);

3. Export and Import
//fileName.js
export defult func;

//mainApp.jc
import func from './fileName.js'

if export multi func 
export func1
export func2 
or 
export { func1, func2 }
>> import {func1} from'./fileName.js'

u can export func or variable

4. class 


5. Spread Operators
1. Spread in Arrays:

Copying an Array:
const originalArray = [1, 2, 3];
const copiedArray = [...originalArray];

console.log(copiedArray); // Output: [1, 2, 3]


Concatenating Arrays:
const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const concatenatedArray = [...array1, ...array2];
console.log(concatenatedArray); // Output: [1, 2, 3, 4, 5, 6]

const originalArray = [1, 2, 3];
const newArray = [...originalArray, 4, 5];

console.log(newArray); // Output: [1, 2, 3, 4, 5]

2. Spread in Objects:
const originalObject = { key1: 'value1', key2: 'value2' };
const copiedObject = { ...originalObject };

console.log(copiedObject); // Output: { key1: 'value1', key2: 'value2' }

const object1 = { key1: 'value1' };
const object2 = { key2: 'value2' };
const mergedObject = { ...object1, ...object2 };

console.log(mergedObject); // Output: { key1: 'value1', key2: 'value2' }

const originalObject = { key1: 'value1' };
const newObject = { ...originalObject, key2: 'value2' };

console.log(newObject); // Output: { key1: 'value1', key2: 'value2' }

  func goo 
const numbers = [1, 2, 32, 3, 4, 5,32,1];

  function sum(...args) {
    return args.reduce((acc, current) => acc + current, 100);
    // args.reduce((value ,define var to save into result the func) => value + result, inital value)
  }

  const result = sum(...numbers);
  console.log(result); // Output: 47

6. Destructuring 
array:
const arr = [1,5,2,3];
const [ , , x] = arr 
c.l(x) => 2
object : 
cosnt ob = {id:'1',name:'mhd'}
const {name} = ob ; ==> mhd
const {id} = ob; ==> 1
or 
const {name , id} = ob;

7.Primitive Types
  var ob1 = {id:'1'};
  var ob2 =  ob1;
  ob2.id = '100';
console.log(ob1.id); 
===> spread operation

14-Array Functions
const  items = items.map((item) => c.l(item))
const  items = items.map((item) => <li> {item} </li> )

15-Array Simple Methodes 
Slice,Splice,Reverse,Concat,Join ,
Fillter,Find,Sort,Reduce

Slice(1) تجاوز اول وحده 
دون تأثير ع اساسية 
اما splice ف تمحي من القديمة القيم المأخوذه
reverse : صف ل العكس وتأثر ع الاصلية
arr1.concat(arr2);
join >> اضافة محارف ل عناصر المصفوفة
const arr2 = arr1.sort((a,b) => 
                      {
                          if(a>b) a : قيمة , b القيمة التالية
                          return 1;  تركن متل ما هنن
                          if(b>a)
                          return -1 عكسن 
                      }); 



17-Higher Order Functions
These functions enable you to write more reusable and modular code by abstracting away common patterns and behaviors.


nodeJs is runtime js >> copmail js code on browser